checkFilesExist,
  cleanupProject,	  cleanupProject,
  createFile,	  createFile,
  ensureCypressInstallation,	
  killPort,	  killPort,
  newProject,	  newProject,
  readJson,	  readJson,
  runCLI,	  runCLI,
  runE2ETests,	  runE2ETests,
  uniq,	  uniq,  use  Strict,
  updateFile,	  updateFile,
  updateJson,	
} from '@nx/e2e/utils';	} from '@nx/e2e/utils';


const TEN_MINS_MS = 600_000;	const TEN_MINS_MS = 600_000;
describe('Cypress E2E Test runner', () => {	// TODO(crystal, @leosvelperez): Still need to investigate why this is failing on CI
xdescribe('Cypress E2E Test runner', () => {
  const myapp = uniq('myapp');	  const myapp = uniq('myapp');


  beforeAll(() => {	  beforeAll(() => {
    newProject({ packages: ['@nx/angular', '@nx/next', '@nx/react'] });	    newProject({ packages: ['@nx/angular', '@nx/next', '@nx/react'] });
    ensureCypressInstallation();	
  });	  });


  afterAll(() => cleanupProject());	  afterAll(() => cleanupProject());
@@ -48,8 +46,7 @@ describe('Cypress E2E Test runner', () => {
    TEN_MINS_MS	    TEN_MINS_MS
  );	  );


  // TODO(crystal, @leosvelperez): Investigate why this is failing	  it(
  xit(	
    'should execute e2e tests using Cypress',	    'should execute e2e tests using Cypress',
    async () => {	    async () => {
      // make sure env vars work	      // make sure env vars work
@@ -61,15 +58,6 @@ describe('Cypress E2E Test runner', () => {
}`	}`
      );	      );


      updateJson(`apps/${myapp}-e2e/project.json`, (json) => {	
        json.targets.e2e.options = {	
          ...json.targets.e2e.options,	
          env: {	
            projectJson: 'i am from the nx project json file',	
          },	
        };	
        return json;	
      });	
      createFile(	      createFile(
        `apps/${myapp}-e2e/src/e2e/env.cy.ts`,	        `apps/${myapp}-e2e/src/e2e/env.cy.ts`,
        `	        `
@@ -84,20 +72,13 @@ describe('env vars', () => {
      'i am from the cypress.env.json file'	      'i am from the cypress.env.json file'
    );	    );
  });	  });
  it('cli args should not merged project.json vars', () => {	
    assert.equal(	
      Cypress.env('projectJson'),	
      undefined	
    );	
  });	
});`	});`
      );	      );


      if (runE2ETests()) {	      if (runE2ETests('cypress')) {
        // contains the correct output and works	        // contains the correct output and works
        const run1 = runCLI(	        const run1 = runCLI(
          `e2e ${myapp}-e2e --no-watch --env.cliArg="i am from the cli args"`	          `e2e ${myapp}-e2e --config \\'{\\"env\\":{\\"cliArg\\":\\"i am from the cli args\\"}}\\'`
        );	        );
        expect(run1).toContain('All specs passed!');	        expect(run1).toContain('All specs passed!');
        await killPort(4200);	        await killPort(4200);
@@ -110,8 +91,15 @@ import { nxE2EPreset } from '@nx/cypress/plugins/cypress-preset';
export default defineConfig({	export default defineConfig({
  e2e: {	  e2e: {
  ...nxE2EPreset(__dirname),	    ...nxE2EPreset(__filename, {
  fixturesFolder: undefined,	      cypressDir: 'src',
      webServerCommands: {
        default: 'nx run ${myapp}:serve',
        production: 'nx run ${myapp}:preview',
      },
      ciWebServerCommand: 'nx run ${myapp}:serve-static',
    }),
    baseUrl: 'http://localhost:4200',
  },	  },
  env: {	  env: {
    fromCyConfig: 'i am from the cypress config file'	    fromCyConfig: 'i am from the cypress config file'
@@ -120,7 +108,7 @@ export default defineConfig({
        );	        );


        const run2 = runCLI(	        const run2 = runCLI(
          `e2e ${myapp}-e2e --no-watch --env.cliArg="i am from the cli args"`	          `e2e ${myapp}-e2e --config \\'{\\"env\\":{\\"cliArg\\":\\"i am from the cli args\\"}}\\'`
        );	        );
        expect(run2).toContain('All specs passed!');	        expect(run2).toContain('All specs passed!');
        await killPort(4200);	        await killPort(4200);
@@ -129,32 +117,25 @@ export default defineConfig({
        updateFile(	        updateFile(
          `apps/${myapp}-e2e/src/e2e/env.cy.ts`,	          `apps/${myapp}-e2e/src/e2e/env.cy.ts`,
          `	          `
describe('env vars', () => {	        describe('env vars', () => {
  it('should not have cli args', () => {	          it('should not have cli args', () => {
    assert.equal(Cypress.env('cliArg'), undefined);	            assert.equal(Cypress.env('cliArg'), undefined);
  });	          });
  it('should have cypress.env.json vars', () => {	          it('should have cypress.env.json vars', () => {
    assert.equal(	            assert.equal(
      Cypress.env('cypressEnvJson'),	              Cypress.env('cypressEnvJson'),
      'i am from the cypress.env.json file'	              'i am from the cypress.env.json file'
    );	            );
  });	          });
  it('should have project.json vars', () => {	          it('should have cypress config vars', () => {
    assert.equal(	            assert.equal(
      Cypress.env('projectJson'),	              Cypress.env('fromCyConfig'),
      'i am from the nx project json file'	              'i am from the cypress config file'
    );	            );
  });	          });
        });`
  it('should have cypress config vars', () => {	
    assert.equal(	
      Cypress.env('fromCyConfig'),	
      'i am from the cypress config file'	
    );	
  });	
});`	
        );	        );
        const run3 = runCLI(`e2e ${myapp}-e2e`);	        const run3 = runCLI(`e2e ${myapp}-e2e`);
        expect(run3).toContain('All specs passed!');	        expect(run3).toContain('All specs passed!');
@@ -165,68 +146,59 @@ describe('env vars', () => {
    TEN_MINS_MS	    TEN_MINS_MS
  );	  );


  // TODO(crystal, @leosvelperez): Investigate why this is failing	  it(
  xit(	    `should allow CT and e2e in same project for a next project`,
    'should run e2e in parallel',	
    async () => {	    async () => {
      const ngAppName = uniq('ng-app');	      const appName = uniq('next-cy-app');
      runCLI(	      runCLI(
        `generate @nx/angular:app ${ngAppName} --e2eTestRunner=cypress --linter=eslint --no-interactive`,	        `generate @nx/next:app ${appName} --e2eTestRunner=none --no-interactive`
        {	      );
          env: {	      runCLI(
            NX_ADD_PLUGINS: 'false',	        `generate @nx/next:component btn --project=${appName} --no-interactive`
          },	      );
        }	      runCLI(
        `generate @nx/next:cypress-component-configuration --project=${appName} --generate-tests --no-interactive`
      );
      runCLI(
        `generate @nx/cypress:configuration --project=${appName} --devServerTarget=${appName}:dev --baseUrl=http://localhost:3000 --no-interactive`
      );	      );


      if (runE2ETests()) {	      if (runE2ETests('cypress')) {
        const results = runCLI(	        expect(runCLI(`run ${appName}:component-test`)).toContain(
          `run-many --target=e2e --parallel=2 --port=cypress-auto --output-style=stream`	          'All specs passed!'
        );	        );
        expect(results).toContain('Successfully ran target e2e for 2 projects');	        expect(runCLI(`run ${appName}:e2e`)).toContain('All specs passed!');
      }	      }
      expect(await killPort(4200)).toBeTruthy();
    },	    },
    TEN_MINS_MS	    TEN_MINS_MS
  );	  );


  // TODO(crystal, @leosvelperez): Investigate why this is failing	  it(
  xit.each(['react', 'next', 'angular'])(	    `should allow CT and e2e in same project for an angular project`,
    `should allow CT and e2e in same project - %s`,	    async () => {
    async (framework: 'react' | 'next' | 'angular') => {	      let appName = uniq(`angular-cy-app`);
      await testCtAndE2eInProject(framework);	      runCLI(
        `generate @nx/angular:app ${appName} --e2eTestRunner=none --no-interactive --bundler=webpack`
      );
      runCLI(
        `generate @nx/angular:component btn --project=${appName} --no-interactive`
      );
      runCLI(
        `generate @nx/angular:cypress-component-configuration --project=${appName} --generate-tests --no-interactive`
      );
      runCLI(
        `generate @nx/cypress:e2e --project=${appName} --baseUrl=http://localhost:4200 --no-interactive`
      );

      if (runE2ETests('cypress')) {
        expect(runCLI(`run ${appName}:component-test`)).toContain(
          'All specs passed!'
        );
        expect(runCLI(`run ${appName}:e2e`)).toContain('All specs passed!');
      }
      expect(await killPort(4200)).toBeTruthy();
    },	    },
    TEN_MINS_MS	    TEN_MINS_MS
  );	  );
});	});

